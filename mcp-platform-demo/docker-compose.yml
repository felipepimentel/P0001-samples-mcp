version: '3.8'

services:
  # === CORE: MCP Gateway ===
  mcp-gateway:
    build: 
      context: ./mcp-gateway
      dockerfile: Dockerfile
    image: mcp-gateway:demo
    container_name: mcp-gateway
    environment:
      - PYTHONUNBUFFERED=1
      - DEMO_MODE=true
      - WEBSOCKET_PORT=9999
      - ENABLE_VISUAL_FEEDBACK=true
    ports:
      - "9999:9999"  # WebSocket for dashboard
      - "8888:8888"  # MCP Server
    volumes:
      - ./mcp-servers:/app/servers
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - kong
      - prometheus
      - grafana
    networks:
      - platform
    restart: unless-stopped

  # === DEMO: Orchestrator of Scenarios ===
  demo-orchestrator:
    build: ./demo-orchestrator
    container_name: demo-orchestrator
    environment:
      - DEMO_MODE=true
      - AUTO_START_SCENARIOS=true
      - SCENARIO_INTERVAL=300
      - GENERATE_HISTORICAL_DATA=true
      - HISTORICAL_DAYS=7
    volumes:
      - ./demo-orchestrator/scenarios:/app/scenarios
      - demo-data:/data
    depends_on:
      - postgres
      - prometheus
      - rabbitmq
    networks:
      - platform
    command: |
      sh -c "
        echo 'ðŸŽ¬ Starting Demo Orchestrator...'
        python orchestrator.py --init-all --start-scenarios
      "

  # === OBSERVABILITY: Complete Stack ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - platform

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=demo
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,yesoreyeram-boomtheme-panel
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - platform

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # UI
      - "6831:6831/udp"  # Thrift compact
      - "14268:14268"    # Thrift direct
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - platform

  # === API GATEWAY ===
  kong:
    image: kong:3.0
    container_name: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"  # API Gateway
      - "8001:8001"  # Admin API
    depends_on:
      - postgres
    networks:
      - platform
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === MESSAGE BROKER ===
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=demo
      - RABBITMQ_DEFAULT_PASS=demo
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - platform

  # === DATABASES ===
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=demo
      - POSTGRES_PASSWORD=demo
      - POSTGRES_MULTIPLE_DATABASES=kong,platform,metrics
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh
    networks:
      - platform

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - platform

  # === EXAMPLE MICROSERVICES ===
  user-service:
    build: ./services/user-service
    container_name: user-service
    environment:
      - SERVICE_NAME=user-service
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - JAEGER_AGENT_HOST=jaeger
      - RABBITMQ_HOST=rabbitmq
      - DEMO_MODE=true
      - SIMULATE_TRAFFIC=true
      - ERROR_RATE=0.02
    depends_on:
      - postgres
      - redis
      - rabbitmq
    deploy:
      replicas: 3
    networks:
      - platform
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  payment-service:
    build: ./services/payment-service
    container_name: payment-service
    environment:
      - SERVICE_NAME=payment-service
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - JAEGER_AGENT_HOST=jaeger
      - RABBITMQ_HOST=rabbitmq
      - DEMO_MODE=true
      - SIMULATE_LATENCY=true
      - LATENCY_MIN=100
      - LATENCY_MAX=500
    depends_on:
      - postgres
      - redis
      - rabbitmq
    deploy:
      replicas: 2
    networks:
      - platform
    labels:
      - "service.critical=true"

  order-service:
    build: ./services/order-service
    container_name: order-service
    environment:
      - SERVICE_NAME=order-service
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - JAEGER_AGENT_HOST=jaeger
      - RABBITMQ_HOST=rabbitmq
      - DEMO_MODE=true
      - MEMORY_LEAK_SIMULATION=true
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - platform

  # === VISUAL DASHBOARD ===
  platform-dashboard:
    build: ./dashboard
    container_name: platform-dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_WEBSOCKET_URL=ws://localhost:9999
      - REACT_APP_GRAFANA_URL=http://localhost:3000
      - REACT_APP_JAEGER_URL=http://localhost:16686
      - REACT_APP_DEMO_MODE=true
    depends_on:
      - mcp-gateway
    networks:
      - platform

  # === DEVELOPMENT TOOLS ===
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - platform

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "8082:8080"
    environment:
      - SWAGGER_JSON_URL=http://kong:8001/swagger
    networks:
      - platform

networks:
  platform:
    driver: bridge
    name: mcp-platform

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:
  portainer-data:
  demo-data: 